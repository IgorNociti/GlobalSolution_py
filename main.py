"""
Henrique Maciel RM559628
Igor Nociti Rm560225

"""

import random
from faker import Faker
from datetime import datetime
import folium

"""
Importa√ß√£o de bibliotecas:
- random: para gerar valores aleat√≥rios simulando sensores
- faker: para gerar nomes de ruas fict√≠cios
- datetime: para registrar a hora do alerta
- folium: para criar o mapa interativo com os bueiros
"""

fake = Faker('pt_BR')

"""
Essa fun√ß√£o gera coordenadas aleat√≥rias na cidade de S√£o Paulo.
Serve para simular onde est√° localizado cada bueiro.
""" 
def gerar_coordenadas_sp():
    lat = random.uniform(-23.70, -23.50)
    lon = random.uniform(-46.75, -46.55)
    return lat, lon

""" 
Essa fun√ß√£o cria uma lista com v√°rios bueiros.
Cada bueiro tem um nome de rua, um n√≠vel de √°gua, uma vaz√£o de √°gua,
tempo de chuva, localiza√ß√£o (lat/lon) e um n√≠vel de risco.
Tudo isso √© gerado aleatoriamente como uma simula√ß√£o.
""" 
def gerar_bueiros(qtd=7):
    bueiros = []
    for _ in range(qtd):
        rua = fake.street_name()
        nivel = round(random.uniform(10, 60), 2)
        vazao = round(random.uniform(0, 20), 2)
        chuva = random.randint(0, 60)
        lat, lon = gerar_coordenadas_sp()

        """
        Essa parte avalia o risco com base nas condi√ß√µes simuladas:
        - Se o n√≠vel de √°gua est√° muito alto, a vaz√£o baixa e est√° chovendo muito ‚Üí risco cr√≠tico
        - Se o n√≠vel est√° moderado e choveu muito ‚Üí risco baixo
        - Caso contr√°rio ‚Üí sem risco
        """
        if nivel > 40 and vazao < 10 and chuva >= 20:
            risco = "üö® RISCO CR√çTICO"
            cor = "red"
        elif nivel > 30 and chuva > 30:
            risco = "‚ö†Ô∏è RISCO BAIXO"
            cor = "orange"
        else:
            risco = "‚úÖ SEM RISCO"
            cor = "green"

        bueiros.append({
            "rua": rua,
            "nivel": nivel,
            "vazao": vazao,
            "chuva": chuva,
            "risco": risco,
            "cor": cor,
            "lat": lat,
            "lon": lon
        })
    return bueiros

""" 
Essa fun√ß√£o cria um mapa da cidade com todos os bueiros simulados.
Cada bueiro aparece com um marcador colorido mostrando o n√≠vel de risco.
O mapa √© salvo como um arquivo HTML que pode ser aberto no navegador.
""" 
def gerar_mapa_bueiros(bueiros):
    mapa = folium.Map(location=[-23.55, -46.63], zoom_start=12)
    for b in bueiros:
        popup = f"""
        <b>{b['risco']}</b><br>
        Rua: {b['rua']}<br>
        N√≠vel: {b['nivel']} cm<br>
        Vaz√£o: {b['vazao']} L/min<br>
        Chuva: {b['chuva']} min
        """
        folium.Marker(
            location=[b['lat'], b['lon']],
            popup=popup,
            icon=folium.Icon(color=b['cor'])
        ).add_to(mapa)

    mapa.save("mapa_bueiros.html")
    print("üìç Mapa salvo como 'mapa_bueiros.html'")

"""
Essa fun√ß√£o salva as informa√ß√µes de cada bueiro em um arquivo chamado 'log_bueiros.txt'.
Cada linha do arquivo mostra o que aconteceu em determinada rua, como se fosse um hist√≥rico.
""" 
def registrar_log(bueiro):
    data_hora = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
    log = f"[{data_hora}] Rua: {bueiro['rua']} | N√≠vel: {bueiro['nivel']}cm | Vaz√£o: {bueiro['vazao']}L/min | Chuva: {bueiro['chuva']}min | Alerta: {bueiro['risco']}\n"
    with open("log_bueiros.txt", "a", encoding="utf-8") as f:
        f.write(log)

""" 
Essa √© a fun√ß√£o principal que executa todo o programa:
- Gera os bueiros
- Mostra os alertas no terminal
- Salva os dados no arquivo de log
- Cria o mapa com os alertas
Ela tamb√©m trata qualquer erro que possa acontecer com try/except.
""" 
def main():
    print("\nüíß Monitoramento Inteligente de Bueiros Urbanos üíß\n")
    try:
        bueiros = gerar_bueiros()

        for b in bueiros:
            print(f"üõ£Ô∏è {b['rua']} ‚Üí {b['risco']} (N√≠vel: {b['nivel']}cm | Vaz√£o: {b['vazao']}L/min | Chuva: {b['chuva']}min)")
            registrar_log(b)

        gerar_mapa_bueiros(bueiros)
        print("\n‚úÖ Dados salvos em 'log_bueiros.txt' e mapa gerado com sucesso!\n")

    except Exception as e:
        print(f"‚ö†Ô∏è Erro durante a execu√ß√£o: {e}")

""" 
Aqui √© onde o programa realmente come√ßa a rodar.
Ele chama a fun√ß√£o principal acima.
""" 
if __name__ == "__main__":
    main()
